---
- hosts: all
  name: Setup Logs and log sizes
  become: true
  gather_facts: false
  tags:
      - preflight
      - preflight-kubelet
  vars_files:
      - "./vars/main.yml"
  tasks:
      - name: Stop kubelet
        systemd:
            state: stopped
            name: kubelet

      - name: Disable kubelet
        shell: systemctl disable kubelet

- hosts: all
  name: Setup Logs and log sizes
  gather_facts: false
  become: true
  tags:
      - preflight
      - preflight-logs
  vars_files:
      - "./vars/main.yml"
  tasks:
      - name: Logrotate
        copy:
            dest: "{{ item.dest }}"
            src: "{{ item.src }}"
        with_items:
            - dest: /etc/logrotate.d/allContainerLogs
              src: allContainerLogs
            - dest: /etc/logrotate.d/cniLogs
              src: cniLogs
            - dest: /etc/logrotate.d/podLogs
              src: podLogs

      - name: Check if logrotate is daily
        stat: path=/etc/cron.daily/logrotate
        register: logrotate_stat

      - name: Move logrotate to hourly if daily
        command: mv /etc/cron.daily/logrotate /etc/cron.hourly/logrotate
        when: logrotate_stat.stat.exists

      - name: Ensure persistent journal is enabled
        lineinfile:
          path: /etc/systemd/journald.conf
          regexp: '^#?SystemMaxUse='
          line: 'SystemMaxUse={{ journalctl_vaccum_size }}'
          state: present
        notify: restart systemd-journald

      - name: Reload systemd-journald configuration
        command: systemctl daemon-reload
  handlers:
    - name: restart systemd-journald
      service:
        name: systemd-journald
        state: restarted

- hosts: all
  name: Setup limits
  gather_facts: false
  become: true
  tags:
      - preflight
      - preflight-limits
  vars_files:
      - "./vars/main.yml"
  tasks:
    - name: Set nofile limit for all users
      lineinfile:
        path: /etc/security/limits.conf
        insertafter: EOF
        line: '* soft nofile 65535\n* hard nofile 65535'
        state: present

    - name: Ensure pam_limits is enabled
      lineinfile:
        path: /etc/pam.d/common-session
        regexp: '^#?session required pam_limits.so'
        line: 'session required pam_limits.so'
        state: present

    - name: Reload the limits configuration
      shell: ulimit -n 65535

- hosts: all
  name: Setup Storage dependencies
  become: true
  gather_facts: false
  tags:
      - preflight
      - preflight-storage-dependencies
  vars_files:
      - "./vars/main.yml"
  tasks:
      - name: Ensure dependencies are installed
        apt:
            name: "{{ packages }}"
            state: present
        vars:
            packages:
                - open-iscsi
                - nfs-common
                - jq

- hosts:
      - master
      - workers
  become: true
  any_errors_fatal: true
  tags:
      - setup
      - setup-k3s
  vars_files:
      - "./vars/main.yml"
  roles:
      - xanmanning.k3s

- hosts: master
  name: Setup master k3s and fetch config
  become: true
  tags:
      - setup
      - setup-init-master
  vars_files:
      - "./vars/main.yml"
  tasks:

      - name: Setup k3s
        shell: "{{ item }}"
        with_items:
            - mkdir -p ~/.kube
            - cp /etc/rancher/k3s/k3s.yaml ~/.kube/config

      - name: Copy output to local files
        fetch:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            flat: true
        with_items:
            - src: /etc/rancher/k3s/k3s.yaml
              dest: "{{ output_dir }}/config"

- name: Fix Config URL
  hosts: localhost
  connection: local
  gather_facts: false
  become: true
  tags:
      - setup
      - setup-fix-kubeconfig
  vars_files:
      - "./vars/main.yml"
  tasks:
      - replace:
            path: ./output/config
            regexp: '127.0.0.1'
            replace: '{{ k3s_registration_address }}'
            backup: true

- hosts: all
  name: Fix Multipath
  become: true
  tags:
      - setup
      - setup-multipath
  tasks:
      - name: Make sure multipath conf file is missing
        file:
            path: /etc/multipath.conf
            state: absent

      - name: Copy Multipath File
        copy:
            src: ./files/multipath.conf
            dest: /etc/multipath.conf

      - name: Restart multipath service
        systemd:
            state: restarted
            name: multipathd
- hosts: all 
  name: Load Kernel Modules 
  become: true 
  tags: 
  - setup 
  - setup-kernel 
  tasks: 
    - name: Enable kernel modules now 
      community.general.modprobe: 
         name: "{{ item }}" 
         state: present  
      loop: [br_netfilter, ip_vs, ip_vs_rr] 
    - name: Enable kernel modules on boot 
      ansible.builtin.copy: 
          mode: 0644 
          dest: "/etc/modules-load.d/{{ item }}.conf" 
          content: "{{ item }}" 
      loop: [br_netfilter, ip_vs, ip_vs_rr]

- hosts: all
  become: true
  tags:
    - unattended_upgrades
  roles:
  - role: hifis.toolkit.unattended_upgrades
    unattended_automatic_reboot: true

