---
#- hosts: master
#  name: Restore nginxproxymanager
#  become: true
#  any_errors_fatal: true
#  vars_files:
#      - "./vars/main.yml"
#  tags:
#      - nginxproxymanager
#  tasks:
#      - name: Ensure dir exists
#        file:
#            path: /tmp/nginx
#            state: directory
#
#      - name: Ensure backup is present
#        copy:
#            src: "{{ item.src }}"
#            dest: "{{ item.dest }}"
#        with_items:
#            - dest: /tmp/nginx/nginxdata.tar.gz
#              src: files/backup/nginx/nginxdata.tar.gz
#            - dest: /tmp/nginx/nginxletsencrypt.tar.gz
#              src: files/backup/nginx/nginxletsencrypt.tar.gz
#      #
#      - name: Register Name
#        shell: kubectl get po -n kube-system -l name=nginxproxymanager | awk 'NR==2{ print $1 }'
#        register: container_name
#      #
#      - name: Transfer backup
#        shell: "kubectl cp -n kube-system /tmp/nginx/{{ item}}.tar.gz {{ container_name.stdout }}:/tmp/{{ item}}.tar.gz"
#        with_items:
#            - nginxdata
#            - nginxletsencrypt
#
#      - name: Extract Data
#        shell: "kubectl exec -n kube-system {{ container_name.stdout }} -- bash -c 'tar -xf /tmp/{{ item.name }}}.tar.gz -C /tmp'"
#        with_items:
#            - name: nginxdata
#              path: data
#            - name: nginxletsencrypt
#              path: etc/letsencrypt
#
#      - name: Apply patch
#        shell: "kubectl exec -n kube-system {{ container_name.stdout }} -- bash -c '/bin/cp -rf /tmp/{{ item.path }}/* /{{ item.path }}'"
#        with_items:
#            - name: nginxdata
#              path: data
#            - name: nginxletsencrypt
#              path: etc/letsencrypt
#
#      - name: Restart daemonset
#        shell: kubectl rollout restart -n kube-system daemonset nginxproxymanager

- hosts: master
  name: Restore simplesecrets
  become: true
  any_errors_fatal: true
  vars_files:
      - "./vars/main.yml"
  tags:
      - simplesecrets
  tasks:
      - name: Restore simplesecrets from backup
        uri:
            url: https://simplesecrets.stefangenov.site/api/simplesecrets/restore
            method: POST
            body: "{{ lookup('file','backup/simplesecrets/simplesecrets.json') }}"
            status_code: 200
            body_format: json

- hosts: master
  name: Restore nodered
  become: true
  any_errors_fatal: true
  vars_files:
      - "./vars/main.yml"
  tags:
      - nodered
  tasks:
      - name: Ensure dir exists
        file:
            path: /tmp/nodered
            state: directory

      - name: Ensure backup is present
        copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
        with_items:
            - dest: /tmp/nodered/flows.json
              src: files/backup/nodered/flows.json
            - dest: /tmp/nodered/flows_cred.json
              src: files/backup/nodered/flows_cred.json
            - dest: /tmp/nodered/settings.json
              src: files/backup/nodered/settings.json
            - dest: /tmp/nodered/package.json
              src: files/backup/nodered/package.json

      - name: Register Name
        shell: kubectl get po -n nodered -l app=nodered | awk 'NR==2{ print $1 }'
        register: container_name

      - name: Transfer backup
        shell: "kubectl cp -n nodered /tmp/nodered/{{ item}}.json {{ container_name.stdout }}:/tmp/{{ item}}.json"
        with_items:
            - flows_cred
            - flows
            - settings
            - package

      - name: Copy backup
        shell: "kubectl exec -n nodered {{ container_name.stdout }} -- bash -c '/bin/cp -rf /tmp/{{ item}}.json /data/'"
        with_items:
            - flows_cred
            - flows
            - settings
            - package

      - name: Npm i
        shell: "kubectl exec -n nodered {{ container_name.stdout }} -- bash -c 'cd /data && npm i'"
        with_items:
            - flows_cred
            - flows
            - settings
            - package

      - name: Restart deployment
        shell: kubectl rollout restart -n nodered deploy nodered

- hosts: master
  name: Restore postgresql
  become: true
  any_errors_fatal: true
  vars_files:
      - "./vars/main.yml"
  tags:
      - postgresql
  tasks:
      - name: Ensure dir exists
        file:
            path: /tmp/postgresql
            state: directory

      - name: Ensure backup is present
        copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
        with_items:
            - dest: /tmp/postgresql/PostgresBackup
              src: files/backup/postgres/PostgresBackup
            - dest: /tmp/postgresql/Postgres14Backup
              src: files/backup/postgres/Postgres14Backup

      - name: Register Name  postgresql 9
        shell: kubectl get po -n postgresql -l app=postgresql | awk 'NR==2{ print $1 }'
        register: container_name_postgresql

      - name: Register Name postgresql 14
        shell: kubectl get po -n postgresql -l app=postgresql14 | awk 'NR==2{ print $1 }'
        register: container_name_postgresql14

      - name: Transfer postgresql backup
        shell: "kubectl cp -n postgresql /tmp/postgresql/PostgresBackup {{ container_name_postgresql.stdout }}:/tmp/PostgresBackup"

      - name: Transfer postgresql14 backup
        shell: "kubectl cp -n postgresql /tmp/postgresql/Postgres14Backup {{ container_name_postgresql14.stdout }}:/tmp/Postgres14Backup"

      - name: Restore Postgresql
        shell: "kubectl exec -n postgresql {{ container_name_postgresql.stdout }} -- bash -c 'psql -f /tmp/PostgresBackup -U postgres'"

      - name: Restore Postgresql14
        shell: "kubectl exec -n postgresql {{ container_name_postgresql14.stdout }} -- bash -c 'psql -f /tmp/Postgres14Backup -U postgres'"

      - name: Restart deployments
        shell: "kubectl rollout restart -n postgresql deploy {{ item }}"
        with_items:
            - postgresql14
            - postgresql

- hosts: master
  name: Restore vaultwarden
  become: true
  any_errors_fatal: true
  vars_files:
      - "./vars/main.yml"
  tags:
      - vaultwarden
  tasks:
      - name: Ensure dir exists
        file:
            path: /tmp/vaultwarden
            state: directory

      - name: Ensure backup is present
        copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
        with_items:
            - dest: /tmp/vaultwarden/vaultwarden.tar.gz
              src: files/backup/vaultwarden/vaultwarden.tar.gz

      - name: Register Name
        shell: kubectl get po -n vaultwarden -l app=vaultwarden | awk 'NR==2{ print $1 }'
        register: container_name

      - name: Transfer backup
        shell: "kubectl cp -n vaultwarden /tmp/vaultwarden/vaultwarden.tar.gz {{ container_name.stdout }}:/tmp/vaultwarden.tar.gz -c backup"

      - name: Extract data
        shell: "kubectl exec -n vaultwarden {{ container_name.stdout }} -c backup -- bash -c 'openssl enc -d -aes256 -salt -pbkdf2 -pass pass:$(echo $BACKUP_ENCRYPTION_KEY) -in /tmp/vaultwarden.tar.gz | tar xz -C /tmp/'"

      - name: Copy data
        shell: "kubectl exec -n vaultwarden {{ container_name.stdout }} -c backup -- bash -c '/bin/cp -rf /tmp/tmp/currBackup/* /data/'"

      - name: Restart deploy
        shell: kubectl rollout restart -n vaultwarden deploy vaultwarden

- hosts: master
  name: Restore trilium
  become: true
  any_errors_fatal: true
  vars_files:
      - "./vars/main.yml"
  tags:
      - trilium
  tasks:
      - name: Ensure dir exists
        file:
            path: /tmp/trilium
            state: directory

      - name: Ensure backup is present
        copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
        with_items:
            - dest: /tmp/trilium/trilium.db
              src: files/backup/trilium/trilium.db

      - name: Register Name
        shell: kubectl get po -n trilium -l app=trilium | awk 'NR==2{ print $1 }'
        register: container_name

      - name: Delete old data
        shell: "kubectl exec -n trilium {{ container_name.stdout }} -- sh -c 'rm -rf /home/node/trilium-data/*.db*'"

      - name: Transfer backup
        shell: "kubectl cp -n trilium /tmp/trilium/trilium.db {{ container_name.stdout }}:/home/node/trilium-data/document.db"

      - name: Make it read/writable
        shell: "kubectl exec -n trilium {{ container_name.stdout }} -- sh -c 'chmod 0600 /home/node/trilium-data/document.db'"

      - name: Restart deploy
        shell: kubectl rollout restart -n trilium deploy trilium

- hosts: master
  name: Restore uptimekuma
  become: true
  any_errors_fatal: true
  vars_files:
      - "./vars/main.yml"
  tags:
      - uptimekuma
  tasks:
      - name: Ensure dir exists
        file:
            path: /tmp/uptimekuma
            state: directory

      - name: Ensure backup is present
        copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
        with_items:
            - dest: /tmp/uptimekuma/kuma.db
              src: files/backup/kuma/kuma.db

      - name: Register Name
        shell: kubectl get po -n uptimekuma -l app=uptimekuma | awk 'NR==2{ print $1 }'
        register: container_name

      - name: Delete old data
        shell: "kubectl exec -n uptimekuma {{ container_name.stdout }} -- sh -c 'rm -rf /app/data/*.db*'"

      - name: Transfer backup
        shell: "kubectl cp -n uptimekuma /tmp/uptimekuma/kuma.db {{ container_name.stdout }}:/app/data/kuma.db"

      - name: Make it read/writable
        shell: "kubectl exec -n uptimekuma {{ container_name.stdout }} -- sh -c 'chmod 0600 /app/data/kuma.db'"

      - name: Restart deploy
        shell: kubectl rollout restart -n uptimekuma deploy uptimekuma

- hosts: master
  name: Restore changedetection
  become: true
  any_errors_fatal: true
  vars_files:
      - "./vars/main.yml"
  tags:
      - changedetection
  tasks:
      - name: Ensure dir exists
        file:
            path: /tmp/changedetection
            state: directory

      - name: Ensure backup is present
        copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
        with_items:
            - dest: /tmp/changedetection/changedetection.zip
              src: files/backup/changedetection/changedetection.zip

      - name: Ensure we have unzip
        apt:
            name: unzip
            state: present

      - name: Convert zip to tar.gz
        shell: "{{ item }}"
        with_items:
            - unzip -o /tmp/changedetection/changedetection.zip -d /tmp/changedetection/
            - rm -rf /tmp/changedetection/changedetection.zip
            - tar -zcvf /tmp/changedetection/changedetection.tar.gz /tmp/changedetection/

      - name: Register Name
        shell: kubectl get po -n changedetection -l app=changedetection | awk 'NR==2{ print $1 }'
        register: container_name

      - name: Delete old data
        shell: "kubectl exec -n changedetection {{ container_name.stdout }} -- sh -c 'rm -rf /datastore/*'"

      - name: Transfer backup
        shell: "kubectl cp -n changedetection /tmp/changedetection/changedetection.tar.gz {{ container_name.stdout }}:/tmp/changedetection.tar.gz"

      - name: Unzip
        shell: "kubectl exec -n changedetection {{ container_name.stdout }} -- sh -c 'tar -xf /tmp/changedetection.tar.gz -C /tmp/'"

      - name: Apply Restore
        shell: "kubectl exec -n changedetection {{ container_name.stdout }} -- bash -c '/bin/cp -rf /tmp/tmp/changedetection/* /datastore/'"

      - name: Restart deploy
        shell: kubectl rollout restart -n changedetection deploy changedetection
