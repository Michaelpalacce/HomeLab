---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
    name: observeability
    namespace: observeability
spec:
    interval: 1h
    install:
        createNamespace: true
    chart:
        spec:
            chart: kube-prometheus-stack
            version: 77.10.0
            interval: 1h
            sourceRef:
                kind: HelmRepository
                name: kube-prometheus-stack
                namespace: flux-system
    values:
      prometheus:
        prometheusSpec:
          scrapeInterval: 60s
          scrapeTimeout: 30s
          image:
            registry: quay.io
            repository: prometheus/prometheus
            tag: v3.5.0
            sha: ""
            pullPolicy: IfNotPresent
          retention: 10d
          retentionSize: 50GiB

          storageSpec: {}
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 55Gi
              selector: {}
        ingress:
          enabled: true
          ingressClassName: nginx
          hosts: 
            - prometheus.sgenov.dev

          paths: []

          tls:
          - secretName: ingress
            hosts:
              - "*.sgenov.dev"
      grafana:

        persistence:
          enabled: true
          type: sts
          storageClassName: "longhorn"
          accessModes:
            - ReadWriteOnce
          size: 20Gi
          finalizers:
            - kubernetes.io/pvc-protection
        ingress:
          ## If true, Grafana Ingress will be created
          ##
          enabled: true
          ingressClassName: nginx

          annotations: {}
            # kubernetes.io/ingress.class: nginx
            # kubernetes.io/tls-acme: "true"

          hosts: 
            - grafana.sgenov.dev

          path: /

          tls:
          - secretName: ingress
            hosts:
              - "*.sgenov.dev"
      crds:
        enabled: true
        ## The CRD upgrade job mitigates the limitation of helm not being able to upgrade CRDs.
        ## The job will apply the CRDs to the cluster before the operator is deployed, using helm hooks.
        ## It deploy a corresponding clusterrole, clusterrolebinding and serviceaccount to apply the CRDs.
        ## This feature is in preview, off by default and may change in the future.
        upgradeJob:
          enabled: true
          forceConflicts: false
