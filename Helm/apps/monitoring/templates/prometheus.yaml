{{- with .Values.prometheus }}

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
    name: prometheus
rules:
    - apiGroups: [""]
      resources:
          - nodes
          - nodes/proxy
          - services
          - endpoints
          - pods
      verbs: ["get", "list", "watch"]
    - apiGroups:
          - extensions
      resources:
          - ingresses
      verbs: ["get", "list", "watch"]
    - nonResourceURLs: ["/metrics"]
      verbs: ["get"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
    name: prometheus
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: prometheus
subjects:
    - kind: ServiceAccount
      name: default
      namespace: {{ $.Release.Namespace }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
    name: prometheus
    namespace: {{ $.Release.Namespace }}
    labels:
        app: prometheus
spec:
    replicas: 1
    strategy:
        rollingUpdate:
            maxUnavailable: 0
    selector:
        matchLabels:
            app: prometheus
    template:
        metadata:
            labels:
                app: prometheus
            annotations:
                {{- with $ }}
                checksum/config: {{ include (print $.Template.BasePath "/prometheus-config.yaml") . | sha256sum }}
                {{- end }}
                prometheus.io/scrape: "true"
                prometheus.io/port: "{{ .port }}"
        spec:
            containers:
                - name: prometheus
                  image: {{ .image }}:{{ .tag }}
                  imagePullPolicy: IfNotPresent
                  securityContext:
                      privileged: true
                  args:
                      - '--storage.tsdb.retention.time={{ .retentionTime }}'
                      - '--storage.tsdb.path=/prometheus'
                      - '--config.file=/etc/prometheus/prometheus.yml'
                  command:
                      - /bin/prometheus
                  ports:
                      - name: web
                        containerPort: {{ .port }}
                  volumeMounts:
                      - name: config-volume
                        mountPath: /etc/prometheus
                      - name: data
                        mountPath: /prometheus
            restartPolicy: Always
            terminationGracePeriodSeconds: 0
            volumes:
                - name: config-volume
                  configMap:
                      name: prometheus-config
                - name: data
                  persistentVolumeClaim:
                      claimName: prometheus-nfs

---

apiVersion: v1
kind: Service
metadata:
    name: prometheus
    namespace: {{ $.Release.Namespace }}
spec:
    {{- with .nodePort }}
    type: NodePort
    {{- end }}
    selector:
        app: prometheus
    ports:
        - name: prometheus
          protocol: TCP
          port: {{ .port }}
          {{- with .nodePort }}
          nodePort: {{ . }}
          {{- end }}

{{- end }}